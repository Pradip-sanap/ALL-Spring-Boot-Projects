package com.product.service;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.Optional;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.modelmapper.ModelMapper;

import com.product.dto.ProductDto;
import com.product.entity.Product;
import com.product.repository.ProductRepository;

@ExtendWith(MockitoExtension.class)
public class ProductServiceImplTest {

    @InjectMocks
    private ProductServiceImpl productService;

    @Mock
    private ProductRepository productRepository;
    
    @Mock
    private ModelMapper modelMapper;

    // --- addProduct Tests ---
    ProductDto getProductDto() {
    	return ProductDto.builder().productName("Iphone")
    								.category("Electronics")
    								.price(800.00)
    								.color("Gold")
    								.productDesc("Best phone ever")
    								.inStock(true)
    								.quantity(600)
    								.build();
    }
    
    private ProductDto productDto;
    private Product product;
//    private final int existingProductId = 1;
//    private final int nonExistingProductId = 2;

    @BeforeEach
    public void setUp() {
        productDto = ProductDto.builder().productName("Iphone")
				.category("Electronics")
				.price(800.00)
				.color("Gold")
				.productDesc("Best phone ever")
				.inStock(true)
				.quantity(600)
				.build();

        product = Product.builder()
        		.pid(101)
         		.productName("Iphone")
				.category("Electronics")
				.price(800.00)
				.color("Gold")
				.productDesc("Best phone ever")
				.inStock(true)
				.quantity(600)
				.build();
        
        
    }

    @Test
    public void testAddProduct_Success() {
        // Arrange
        when(modelMapper.map(productDto, Product.class)).thenReturn(product);
        when(productRepository.save(product)).thenReturn(product);
        
        when(modelMapper.map(product, ProductDto.class)).thenReturn(productDto);
        productDto.setPid(101);

        // Act
        ProductDto result = productService.addProduct(productDto);

        // Assert
        assertNotNull(result);
        assertEquals(productDto.getPid(), result.getPid());
        assertEquals(productDto.getProductName(), result.getProductName());
        verify(modelMapper).map(productDto, Product.class);
        verify(productRepository).save(product);
        verify(modelMapper).map(product, ProductDto.class);
    }
    
    @Test
    public void testAddProduct_Exception() {
        // Arrange
        when(modelMapper.map(productDto, Product.class)).thenReturn(product);
        when(productRepository.save(product)).thenThrow(new RuntimeException("Database error"));

        // Act
        ProductDto result = productService.addProduct(productDto);

        // Assert
        assertNull(result);
        verify(modelMapper).map(productDto, Product.class);
        verify(productRepository).save(product);
    }
    @Test
    public void testAddProduct_NullInput() {
        // Act
        ProductDto result = productService.addProduct(null);

        // Assert
        assertNull(result);
    }
  
//    // --- getProduct Tests ---
    @Test
    public void testGetProduct_WhenProductExists_ReturnsProductDto() {
    	int existingProductId = 101;
        when(productRepository.findById(existingProductId)).thenReturn(Optional.of(product));
        productDto.setPid(101);
        when(modelMapper.map(product, ProductDto.class)).thenReturn(productDto);

        ProductDto result = productService.getProduct(existingProductId);

        assertNotNull(result);
        assertEquals(productDto, result);
    }
    
    @Test
    public void testGetProduct_WhenProductDoesNotExist_ReturnsNull() {
    	int nonExistingProductId = 201;
        when(productRepository.findById(nonExistingProductId)).thenReturn(Optional.empty());

        ProductDto result = productService.getProduct(nonExistingProductId);

        assertNull(result);
    }
    
    @Test
    public void testGetProduct_WhenExceptionOccurs_ReturnsNull() {
    	int existingProductId = 101;
        when(productRepository.findById(existingProductId)).thenThrow(new RuntimeException("Database error"));

        ProductDto result = productService.getProduct(existingProductId);

        assertNull(result);
    }
    
    @Test
    public void testDeleteProduct_WhenProductExists_ReturnsSuccessMessage() {
    	int existingProductId = 101;
        when(productRepository.findById(existingProductId)).thenReturn(Optional.of(product));

        String result = productService.deleteProduct(existingProductId);

        assertEquals("Product Record Deleted Successfully !!!", result);
        verify(productRepository).deleteById(existingProductId); // Ensure deletion is called
    }
    
    @Test
    public void testDeleteProduct_WhenProductDoesNotExist_ReturnsErrorMessage() {
    	int nonExistingProductId = 201;
        when(productRepository.findById(nonExistingProductId)).thenReturn(Optional.empty());

        String result = productService.deleteProduct(nonExistingProductId);

        assertEquals("Product Not found!!!", result);
    }
//    // --- updateProduct Tests ---
    
    @Test
    public void testUpdateProduct_WhenProductExistsAndAllUpdatesAreValid_ReturnsUpdatedProductDto() {
    	int existingProductId = 101;
        when(productRepository.findById(existingProductId)).thenReturn(Optional.of(product));
        when(productRepository.saveAndFlush(any(Product.class))).thenReturn(product);
        productDto.setPid(101);
        when(modelMapper.map(product, ProductDto.class)).thenReturn(productDto);
        
        ProductDto newValues = new ProductDto(); // Set the new ProductDto with desired updates
        newValues.setProductName("New Product Name");
        newValues.setProductDesc("New Description");
        newValues.setPrice(120.0);
        newValues.setQuantity(20);
        newValues.setCategory("New Category");
        newValues.setInStock(false);
        newValues.setColor("New Color");
        
        Object result = productService.updateProduct(existingProductId, newValues);
        
        System.out.println(product);
        System.out.println(result);
        assertEquals(product, result);
        verify(productRepository).saveAndFlush(any(Product.class));
    }
}
