package com.product.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import com.product.cotnroller.ProductController;
import com.product.dto.ProductDto;
import com.product.service.ProductService;

public class ProductControllerTests {

	private ProductController productController;

	@Mock
	private ProductService productService;

	@BeforeEach
	public void setUp() {
		MockitoAnnotations.openMocks(this);
		productController = new ProductController(productService); 
	}

	@Test
	public void testAddProduct_Success() {
		// Arrange
		ProductDto inputProduct = ProductDto.builder().pid(1).productName("Test Product")
				.productDesc("Test Description").price(99.99).quantity(10).category("Electronics").inStock(true)
				.color("Black").build();

		// Mocking the service layer to return the same product when adding it
		when(productService.addProduct(inputProduct)).thenReturn(inputProduct);

		// Act
		ResponseEntity<ProductDto> response = productController.addProduct(inputProduct);

		// Assert
		assertEquals(HttpStatus.CREATED, response.getStatusCode());
		assertEquals(inputProduct, response.getBody());
	}

//	@Test
//	public void testAddProduct_Success() {
//		// Arrange
//		ProductDto inputProduct = new ProductDto();
//		inputProduct.setPid(1);
//		inputProduct.setProductName("Test Product");
//
//		ProductDto savedProduct = new ProductDto();
//		savedProduct.setPid(1);
//		savedProduct.setProductName("Test Product");
//		savedProduct.setQuantity(10); // assuming a default quantity
//
//		when(productService.addProduct(inputProduct)).thenReturn(savedProduct);
//
//		// Act
//		ResponseEntity<ProductDto> response = productController.addProduct(inputProduct);
//
//		// Assert
//		assertEquals(HttpStatus.CREATED, response.getStatusCode());
//		assertEquals(savedProduct, response.getBody());
//	}

	@Test
	public void testAddProduct_NullInput() {
		// Act
		ResponseEntity<ProductDto> response = productController.addProduct(null);

		// Assert
		assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
	}

	@Test
	public void testAddProduct_InvalidInput() {
		// Arrange
		ProductDto inputProduct = new ProductDto(); // Missing required fields

		// Act
		ResponseEntity<ProductDto> response = productController.addProduct(inputProduct);

		// Assert
		assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
	}

	@Test
	public void testAddProduct_ServiceException() {
		// Arrange
		ProductDto inputProduct = new ProductDto();
		inputProduct.setPid(1);
		inputProduct.setProductName("Test Product");

		when(productService.addProduct(inputProduct)).thenThrow(new RuntimeException("Service Exception"));

		// Act
		ResponseEntity<ProductDto> response = productController.addProduct(inputProduct);

		// Assert
		assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode());
	}

}
